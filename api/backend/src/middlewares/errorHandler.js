import { ERROR_MESSAGES } from '../constants.js';

// Custom error class
export class AppError extends Error {
Â  constructor(message, statusCode) {
Â  Â  super(message);
Â  Â  this.statusCode = statusCode;
Â  Â  this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
Â  Â  this.isOperational = true;

Â  Â  Error.captureStackTrace(this, this.constructor);
Â  }
}

// Handle MongoDB validation errors
const handleValidationError = (err) => {
Â  const errors = Object.values(err.errors).map(error => error.message);
Â  const message = `Invalid input data: ${errors.join('. ')}`;
Â  return new AppError(message, 400);
};

// Handle MongoDB duplicate key errors
const handleDuplicateKeyError = (err) => {
Â  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
Â  const message = `Duplicate field value: ${value}. Please use another value!`;
Â  return new AppError(message, 400);
};

// Handle MongoDB cast errors
const handleCastError = (err) => {
Â  const message = `Invalid ${err.path}: ${err.value}`;
Â  return new AppError(message, 400);
};

// Handle JWT errors
const handleJWTError = () => {
Â  return new AppError('Invalid token. Please log in again!', 401);
};

// Handle JWT expired errors
const handleJWTExpiredError = () => {
Â  return new AppError('Your token has expired! Please log in again.', 401);
};

// Development error response (Always sends JSON)
const sendErrorDev = (err, res) => {
Â  return res.status(err.statusCode).json({
Â  Â  success: false,
    status: err.status,
Â  Â  message: err.message,
Â  Â  error: err,
Â  Â  stack: err.stack
Â  });
};

// Production error response (Always sends JSON)
const sendErrorProd = (err, res) => {
Â  // Operational, trusted error: send message to client
Â  if (err.isOperational) {
Â  Â  return res.status(err.statusCode).json({
Â  Â  Â  success: false,
      status: err.status,
Â  Â  Â  message: err.message
Â  Â  });
Â  }
Â  // Programming or other unknown error: don't leak error details
Â  console.error('ERROR ðŸ’¥', err);
Â  return res.status(500).json({
Â  Â  success: false,
    status: 'error',
Â  Â  message: ERROR_MESSAGES.INTERNAL_SERVER_ERROR || 'Something went very wrong!'
Â  });
};

// Main error handling middleware
export const errorHandler = (err, req, res, next) => {
Â  err.statusCode = err.statusCode || 500;
Â  err.status = err.status || 'error';

Â  if (process.env.NODE_ENV === 'development') {
Â  Â  sendErrorDev(err, res);
Â  } else if (process.env.NODE_ENV === 'production') {
Â  Â  let error = { ...err };
Â  Â  error.message = err.message;

Â  Â  if (error.name === 'CastError') error = handleCastError(error);
Â  Â  if (error.code === 11000) error = handleDuplicateKeyError(error);
Â  Â  if (error.name === 'ValidationError') error = handleValidationError(error);
Â  Â  if (error.name === 'JsonWebTokenError') error = handleJWTError();
Â  Â  if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

Â  Â  sendErrorProd(error, res);
Â  }
};

// 404 handler
export const notFound = (req, res, next) => {
Â  const error = new AppError(`Route ${req.originalUrl} not found`, 404);
Â  next(error);
};

// Async error wrapper
export const asyncHandler = (fn) => {
Â  return (req, res, next) => {
Â  Â  Promise.resolve(fn(req, res, next)).catch(next);
Â  };
};

// Rate limiting error handler
export const rateLimitErrorHandler = (err, req, res, next) => {
Â  if (err.type === 'entity.too.large') {
Â  Â  return res.status(413).json({
Â  Â  Â  success: false,
Â  Â  Â  message: 'File too large',
Â  Â  Â  error: 'The uploaded file exceeds the maximum allowed size'
Â  Â  });
Â  }
Â  next(err);
};

// Validation error handler
export const validationErrorHandler = (err, req, res, next) => {
Â  if (err.name === 'ValidationError') {
Â  Â  const errors = Object.values(err.errors).map(error => error.message);
Â  Â  return res.status(400).json({
Â  Â  Â  success: false,
Â  Â  Â  message: ERROR_MESSAGES.VALIDATION_ERROR,
Â  Â  Â  errors
Â  Â  });
Â  }
Â  next(err);
};

